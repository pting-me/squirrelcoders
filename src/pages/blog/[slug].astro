---
import type { MarkdownInstance } from 'astro';
import BaseLayout from '../../layouts/BaseLayout.astro';
import Bio from '../../components/Bio.astro';
import getSlug from '../../utils/getSlug';
import formatPublishDate from '../../utils/formatPublishDate';
import readingTime from 'reading-time';

/**
 * frontmatter that is placed in all blog posts
 */
interface BlogFrontmatter {
  title: string;
  publishDate: string;
  description: string;
}

export async function getStaticPaths() {
  const posts: MarkdownInstance<BlogFrontmatter>[] = await Astro.glob(
    '../../data/blog-posts/*.md',
  );
  return posts.map((postProps) => ({
    params: { slug: getSlug(postProps.file) },
    props: {
      formattedReadingTime: readingTime(postProps.rawContent()).text,
      formattedPublishDate: formatPublishDate(
        postProps.frontmatter.publishDate,
      ),
      ...postProps,
    },
  }));
}

/**
 * `Astro.props` as returned by `getStaticPaths()`
 */
type InternalProps = Awaited<
  ReturnType<typeof getStaticPaths>
>[number]['props'];

const { slug } = Astro.params;
const { Content, frontmatter, formattedReadingTime, formattedPublishDate } = Astro.props as InternalProps;
const { title, description } = frontmatter;
const permalink = `${Astro.site?.href}${slug}`;
---

<BaseLayout
  title={title}
  description={description}
  permalink={permalink}
  current="blog"
>
  <header class="text-center">
    <p
      class="uppercase font-sans font-semibold text-stone-600 dark:text-stone-300"
    >
      {formattedPublishDate} ~ {formattedReadingTime}
    </p>
    <h1 class="mt-6 mb-4 text-4xl">{title}</h1>
    <hr class="min-w-min w-1/3 mx-auto my-10" />
  </header>
  <div class="my-0 mx-auto max-w-2xl w-full">
    <article class="blog-post--content">
      <Content />
    </article>
    <hr />
    <Bio />
  </div>
</BaseLayout>
